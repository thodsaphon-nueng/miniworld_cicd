pipeline {
    agent any

    environment {
        IMAGE_NAME = "microlab_app1"
        IMAGE_TAG = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
        REGISTRY_URL= "nexus:5000"
    }

  


    stages {

        stage('Cleanup Old Images') {
            steps {
                script {
                    sh """
                        echo "Cleaning up all containers and images for ${IMAGE_NAME}..."

                        # หาคอนเทนเนอร์ที่ใช้ image ที่มี tag ตรงกับ branch name (เช่น microlab_app1:dev-*)
                        CONTAINER_IDS=\$(docker ps -a --format '{{.ID}} {{.Image}}' | grep '${IMAGE_NAME}:${BRANCH_NAME}-' | awk '{print \$1}')
                        if [ -n "\$CONTAINER_IDS" ]; then
                            echo "Removing containers: \$CONTAINER_IDS"
                            docker rm -f \$CONTAINER_IDS || true
                        else
                            echo "No containers to remove"
                        fi

                        # ลบ images ทั้งหมดที่ชื่อ IMAGE_NAME (ทุก tag)
                        IMAGE_IDS=\$(docker images ${IMAGE_NAME} -q)
                        if [ -n "\$IMAGE_IDS" ]; then
                            echo "Removing images: \$IMAGE_IDS"
                            docker rmi -f \$IMAGE_IDS || true
                        else
                            echo "No images to remove"
                        fi
                    """
                }
            }
        }
        
       
        
        stage('Read Vault Secrets') {
            steps {
                script {
                    if (env.BRANCH_NAME == '_dev') {
                        withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: 'vault-credential', vaultAddr: 'http://vault:8200']]) {
                                sh script: """                                                        
                                    vault kv get -format=yaml secret/myapp | yq eval .data.data | tr -d '"' | tr -d "'" | sed -e 's|: |=|g' > .env
                                """     
                            }
                    }

                    if (env.BRANCH_NAME == 'main'){
                                withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: 'vault-credential', vaultAddr: 'http://vault:8200']]) {
                                                                sh script: """                                                        
                                                                    vault kv get -format=yaml secret/myapp_main  | yq eval .data.data | tr -d '"' | tr -d "'" | sed -e 's|: |=|g' > .env
                                                                """     
                                                            }

                    }
                }
            }
        }

        stage('Branch Check') {
            steps {
                script {
                    echo "Building branch: ${env.BRANCH_NAME}"

                    if (env.BRANCH_NAME == 'main') {
                        echo "This is the main branch. Deploying to production..."
                    } else if (env.BRANCH_NAME == '_dev') {
                        echo "This is the develop branch. Running integration tests..."
                    } 
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh """
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                    """
                }
            }
        }

        stage('Push To  Docker Registry') {
            steps {
                script {
                    echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh """
                        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG}
                        docker push ${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }


        // stage('Deploy') {
        //     steps {
        //          script {
        //             echo 'Deploy the project...'
        //             if (env.BRANCH_NAME == 'main') {
                        
        //                 sh """
        //                     docker run -e PORT=3001  -d --env-file .env -p 3001:3001 ${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG}
        //                 """
        //             }

        //             if (env.BRANCH_NAME == '_dev') {

        //                 sh """
        //                     docker run -d --env-file .env -p 3000:3000 ${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG}
        //                 """

        //             }
        //          }
        //     }
        // }

        stage('Deploy') {
            steps {
                script {
                    echo "Cloning infra repo using GitSCM..."

                    dir('infra') {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '*/main']], // หรือเปลี่ยนตาม branch ที่ต้องการ
                            userRemoteConfigs: [[
                                url: 'https://gitlab.com/nueng_ch/infa.git',
                                credentialsId: 'gitlab-token' // Jenkins credentials ที่คุณสร้างไว้
                            ]]
                        ])
                    }
                    
                }
            }
        }


        
    }


    // post {
    //     always {
            
    //         // cleanWs()
    //     }
    // }
}




sh '''
                    echo "env:" > env-values.yaml
                    awk -F= '!/^#/ && NF==2 {
                        gsub(/"/, "", \$2);
                        printf "  - name: %s\\n    value: \\"%s\\"\\n", \$1, \$2
                    }' .env >> env-values.yaml
                    
                    '''


sh """
                        helm upgrade --install ${releaseName} ${helmChartPath} \
                        --namespace ${namespace} --create-namespace \
                        -f ./env-values.yaml \
                        --set image.repository=${REGISTRY_URL}/${IMAGE_NAME} \
                        --set image.tag=${IMAGE_TAG}
                    """


